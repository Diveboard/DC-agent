#include "DeviceSuuntoEmu.h"
#include "Logger.h"

int DeviceSuuntoEmu::open(){ return(0);}
void DeviceSuuntoEmu::close(){}
int DeviceSuuntoEmu::write_serial(unsigned char *buff,int len)
{
	int length = 0;
	unsigned char *answer = NULL;

	//memory for 050024
	int len050024 = 6;
	unsigned char ans050024[6] = {0x05, 0x00, 0x24, 0x01, 0x0a, 0x2A};

	//answer to 08
	int len08 = 244;
	unsigned char ans08[244] = {0x08, 0x20, 0x00, 0x00, 0x17, 0x14, 0x80, 0x7D, 0xFF, 0xFF, 0xFF, 0x00, 0x01, 0x00, 0x02, 0x00, 0x01, 0x01, 0x00, 0x01, 0xFF, 0xFD, 0xFE, 0xFF, 0x01, 0x01, 0x00, 0x02, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0xD5, 0x08, 0x20, 0x01, 0xFD, 0x00, 0x00, 0xFF, 0xFF, 0x01, 0x00, 0xFE, 0xFF, 0xFE, 0x00, 0x01, 0xFE, 0x00, 0x00, 0xFD, 0xFF, 0xFE, 0xFD, 0x01, 0x00, 0xFF, 0xFD, 0x02, 0xFF, 0x00, 0x02, 0x01, 0xFE, 0x00, 0x00, 0xD7, 0x08, 0x20, 0xFF, 0xFC, 0x00, 0xFD, 0xFE, 0x02, 0xFF, 0x01, 0x00, 0x02, 0x00, 0x01, 0x01, 0x02, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0x01, 0x01, 0x00, 0x01, 0xFB, 0xFC, 0x01, 0x02, 0x00, 0x04, 0x00, 0x03, 0x28, 0x08, 0x20, 0xFE, 0xFE, 0xFE, 0xFB, 0xFD, 0xFA, 0xF9, 0xFE, 0x01, 0xFF, 0x00, 0xFD, 0xFF, 0xFE, 0x7E, 0xFF, 0x00, 0x02, 0x05, 0xFE, 0xFF, 0xF8, 0xF7, 0xFA, 0x7A, 0xFF, 0xFF, 0xFF, 0x00, 0x01, 0xFD, 0xFF, 0xDB, 0x08, 0x20, 0x03, 0x04, 0x02, 0xFF, 0x01, 0x04, 0x07, 0x04, 0x01, 0xFE, 0xFD, 0x02, 0x04, 0x00, 0xFC, 0x01, 0x02, 0x05, 0x02, 0x04, 0xFD, 0x01, 0x04, 0x01, 0xFF, 0x00, 0x00, 0x03, 0x00, 0xFE, 0x00, 0x02, 0xD5, 0x08, 0x20, 0x00, 0xFF, 0x02, 0xFE, 0xFD, 0x00, 0x01, 0x00, 0x01, 0xFE, 0x00, 0x02, 0x01, 0xFE, 0x00, 0xFF, 0x00, 0x01, 0xFF, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x04, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x01, 0x2C, 0x08, 0x1C, 0x00, 0x01, 0x02, 0x04, 0x08, 0x03, 0x05, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x0B, 0x22, 0x0E, 0x1F, 0x07, 0x0A, 0x1C, 0x0F, 0x00, 0x00, 0x03, 0x14, 0x09, 0x03, 0x29, 0x08, 0x09, 0x00, 0x09};

	//answer to 09
	int len09 = 3;
	unsigned char ans09[3] = {0x09, 0x00, 0x09};

	if (buff[0] == 0x05 && buff[2] == 0x24)
	{
		LOGINFO("Choosing answer 0x05");
		length = len050024;
		answer = ans050024;
	}	
	if (buff[0] == 0x08)
	{
		LOGINFO("Choosing answer 0x08");
		length = len08;
		answer = ans08;
	}
	if (buff[0] == 0x09)
	{
		LOGINFO("Choosing answer 0x09");
		length = len09;
		answer = ans09;
	}

	if (answer)
		for (int i = 0; i< length; i++)
			answers.push_back(answer[i]);

	return(len);
}

int DeviceSuuntoEmu::read_serial(unsigned char *buffer, unsigned int nb, int timeout)
{
	unsigned int i;
	
	for (i=0; i< nb && answers.size() > 0; i++)
	{
		buffer[i] = answers[0];
		answers.erase(answers.begin());
	}
	
	return(i?i:-1);
}

