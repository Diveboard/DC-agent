///////////////////////////////////////////////////////////////////////////// C++ code generated with wxFormBuilder (version Nov 27 2012)// http://www.wxformbuilder.org///// PLEASE DO "NOT" EDIT THIS FILE!///////////////////////////////////////////////////////////////////////////#include "dive_agent_forms.h"#include "FBloginbutton.png.h"///////////////////////////////////////////////////////////////////////////UploadDivesDialogBase::UploadDivesDialogBase( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxDialog( parent, id, title, pos, size, style ){	this->SetSizeHints( wxSize( 450,-1 ), wxDefaultSize );		wxBoxSizer* m_mainSizer;	m_mainSizer = new wxBoxSizer( wxVERTICAL );		wxGridSizer* m_controlsSizer;	m_controlsSizer = new wxGridSizer( 2, 2, 0, 0 );		m_selectComputerStatic = new wxStaticText( this, wxID_ANY, wxT("Select computer:"), wxDefaultPosition, wxDefaultSize, 0 );	m_selectComputerStatic->Wrap( -1 );	m_controlsSizer->Add( m_selectComputerStatic, 0, wxALIGN_RIGHT|wxALL, 5 );		m_selectComputerCombo = new wxComboBox( this, wxID_ANY, wxT("Combo!"), wxDefaultPosition, wxDefaultSize, 0, NULL, wxCB_READONLY ); 	m_controlsSizer->Add( m_selectComputerCombo, 0, wxALIGN_RIGHT|wxEXPAND|wxRIGHT, 5 );		m_selectPortStatic = new wxStaticText( this, wxID_ANY, wxT("Select port:"), wxDefaultPosition, wxDefaultSize, 0 );	m_selectPortStatic->Wrap( -1 );	m_controlsSizer->Add( m_selectPortStatic, 0, wxALIGN_RIGHT|wxALL, 5 );		m_selectPortCombo = new wxComboBox( this, wxID_ANY, wxT("Combo!"), wxDefaultPosition, wxDefaultSize, 0, NULL, wxCB_READONLY ); 	m_controlsSizer->Add( m_selectPortCombo, 0, wxALIGN_RIGHT|wxEXPAND|wxRIGHT, 5 );			m_mainSizer->Add( m_controlsSizer, 1, wxEXPAND, 5 );		m_dialogDescriptionStatic = new wxStaticText( this, wxID_ANY, wxT("Connect your dive computer to you MAC, put it in \"PC\" mode\nand then you are ready to hit \"Upload dives\" button."), wxDefaultPosition, wxDefaultSize, 0 );	m_dialogDescriptionStatic->Wrap( -1 );	m_mainSizer->Add( m_dialogDescriptionStatic, 0, wxALL, 5 );		wxBoxSizer* m_buttonSizer;	m_buttonSizer = new wxBoxSizer( wxHORIZONTAL );			m_buttonSizer->Add( 0, 0, 1, wxEXPAND, 5 );		m_uploadDivesButton = new wxButton( this, wxID_ANY, wxT("Upload Dives"), wxDefaultPosition, wxDefaultSize, 0 );	m_buttonSizer->Add( m_uploadDivesButton, 0, wxALIGN_BOTTOM|wxALL, 5 );			m_mainSizer->Add( m_buttonSizer, 1, wxEXPAND, 5 );			this->SetSizer( m_mainSizer );	this->Layout();	m_mainSizer->Fit( this );		this->Centre( wxBOTH );		// Connect Events	m_selectComputerCombo->Connect( wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler( UploadDivesDialogBase::selectComputerComboOnCombobox ), NULL, this );	m_selectPortCombo->Connect( wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler( UploadDivesDialogBase::selectPortComboOnCombobox ), NULL, this );	m_uploadDivesButton->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( UploadDivesDialogBase::uploadDivesButtonOnButtonClick ), NULL, this );}UploadDivesDialogBase::~UploadDivesDialogBase(){	// Disconnect Events	m_selectComputerCombo->Disconnect( wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler( UploadDivesDialogBase::selectComputerComboOnCombobox ), NULL, this );	m_selectPortCombo->Disconnect( wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler( UploadDivesDialogBase::selectPortComboOnCombobox ), NULL, this );	m_uploadDivesButton->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( UploadDivesDialogBase::uploadDivesButtonOnButtonClick ), NULL, this );	}UploadDivesProgressDialogBase::UploadDivesProgressDialogBase( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxDialog( parent, id, title, pos, size, style ){	this->SetSizeHints( wxSize( 450,-1 ), wxDefaultSize );		wxBoxSizer* m_mainSizer;	m_mainSizer = new wxBoxSizer( wxVERTICAL );		wxBoxSizer* m_statusSizer;	m_statusSizer = new wxBoxSizer( wxVERTICAL );			m_statusSizer->Add( 0, 0, 1, wxEXPAND, 5 );		m_statusStatic = new wxStaticText( this, wxID_ANY, wxT("Status:"), wxDefaultPosition, wxDefaultSize, 0 );	m_statusStatic->Wrap( -1 );	m_statusSizer->Add( m_statusStatic, 1, wxALIGN_BOTTOM|wxALL, 5 );			m_mainSizer->Add( m_statusSizer, 2, wxEXPAND, 5 );		wxBoxSizer* m_gaugeSizer;	m_gaugeSizer = new wxBoxSizer( wxHORIZONTAL );		m_uploadProgressGauge = new wxGauge( this, wxID_ANY, 100, wxDefaultPosition, wxDefaultSize, wxGA_HORIZONTAL );	m_gaugeSizer->Add( m_uploadProgressGauge, 10, wxALL|wxEXPAND, 5 );		m_uploadProgressStatic = new wxStaticText( this, wxID_ANY, wxT("100%"), wxDefaultPosition, wxDefaultSize, 0 );	m_uploadProgressStatic->Wrap( -1 );	m_gaugeSizer->Add( m_uploadProgressStatic, 0, wxALIGN_RIGHT|wxALL, 5 );			m_mainSizer->Add( m_gaugeSizer, 1, wxEXPAND, 5 );		wxBoxSizer* m_buttonSizer;	m_buttonSizer = new wxBoxSizer( wxVERTICAL );			m_buttonSizer->Add( 0, 0, 1, wxEXPAND, 5 );		m_actionButton = new wxButton( this, wxID_ANY, wxT("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );	m_buttonSizer->Add( m_actionButton, 0, wxALIGN_RIGHT|wxALL, 5 );			m_mainSizer->Add( m_buttonSizer, 2, wxEXPAND, 5 );			this->SetSizer( m_mainSizer );	this->Layout();	m_mainSizer->Fit( this );		this->Centre( wxBOTH );		// Connect Events	m_actionButton->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( UploadDivesProgressDialogBase::actionButtonOnButtonClick ), NULL, this );}UploadDivesProgressDialogBase::~UploadDivesProgressDialogBase(){	// Disconnect Events	m_actionButton->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( UploadDivesProgressDialogBase::actionButtonOnButtonClick ), NULL, this );	}PreferencesDialogBase::PreferencesDialogBase( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxDialog( parent, id, title, pos, size, style ){	this->SetSizeHints( wxDefaultSize, wxDefaultSize );		wxBoxSizer* m_mainSizer;	m_mainSizer = new wxBoxSizer( wxVERTICAL );		m_accauntInfoPanel = new wxPanel( this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );	wxBoxSizer* m_accountInfoSizer;	m_accountInfoSizer = new wxBoxSizer( wxVERTICAL );		m_accountBitmap = new wxStaticBitmap( m_accauntInfoPanel, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDefaultSize, 0 );	m_accountInfoSizer->Add( m_accountBitmap, 10, wxALL|wxEXPAND, 5 );		wxBoxSizer* m_accountNameInfoSizer;	m_accountNameInfoSizer = new wxBoxSizer( wxHORIZONTAL );		m_accountStatic = new wxStaticText( m_accauntInfoPanel, wxID_ANY, wxT("Diveboard account: "), wxDefaultPosition, wxDefaultSize, 0 );	m_accountStatic->Wrap( -1 );	m_accountNameInfoSizer->Add( m_accountStatic, 0, wxALIGN_RIGHT|wxALL, 5 );			m_accountNameInfoSizer->Add( 0, 0, 1, wxEXPAND, 5 );		m_unlinkButton = new wxButton( m_accauntInfoPanel, wxID_ANY, wxT("Unlink"), wxDefaultPosition, wxDefaultSize, 0 );	m_accountNameInfoSizer->Add( m_unlinkButton, 0, wxALL, 5 );			m_accountInfoSizer->Add( m_accountNameInfoSizer, 1, wxEXPAND, 5 );			m_accauntInfoPanel->SetSizer( m_accountInfoSizer );	m_accauntInfoPanel->Layout();	m_accountInfoSizer->Fit( m_accauntInfoPanel );	m_mainSizer->Add( m_accauntInfoPanel, 1, wxEXPAND | wxALL, 5 );		m_accountSetPanel = new wxPanel( this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );	wxBoxSizer* m_accountSetSizer;	m_accountSetSizer = new wxBoxSizer( wxHORIZONTAL );		wxBoxSizer* m_accountSetViaEmailSizer;	m_accountSetViaEmailSizer = new wxBoxSizer( wxVERTICAL );		wxBoxSizer* m_EmailSizer;	m_EmailSizer = new wxBoxSizer( wxHORIZONTAL );			m_EmailSizer->Add( 0, 0, 1, wxEXPAND, 5 );		m_emailStatic = new wxStaticText( m_accountSetPanel, wxID_ANY, wxT("E-Mail:"), wxDefaultPosition, wxDefaultSize, 0 );	m_emailStatic->Wrap( -1 );	m_EmailSizer->Add( m_emailStatic, 1, wxALIGN_RIGHT|wxALL, 5 );		m_emailText = new wxTextCtrl( m_accountSetPanel, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );	m_emailText->SetMaxLength( 0 ); 	m_EmailSizer->Add( m_emailText, 3, wxALL, 5 );			m_accountSetViaEmailSizer->Add( m_EmailSizer, 1, wxEXPAND, 5 );		wxBoxSizer* m_passwordSizer;	m_passwordSizer = new wxBoxSizer( wxHORIZONTAL );			m_passwordSizer->Add( 0, 0, 1, wxEXPAND, 5 );		m_paswordStatic = new wxStaticText( m_accountSetPanel, wxID_ANY, wxT("Password:"), wxDefaultPosition, wxDefaultSize, 0 );	m_paswordStatic->Wrap( -1 );	m_passwordSizer->Add( m_paswordStatic, 1, wxALIGN_RIGHT|wxALL, 5 );		m_passwordText = new wxTextCtrl( m_accountSetPanel, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_PASSWORD );	m_passwordText->SetMaxLength( 0 ); 	m_passwordSizer->Add( m_passwordText, 3, wxALL, 5 );			m_accountSetViaEmailSizer->Add( m_passwordSizer, 1, wxEXPAND, 5 );		wxBoxSizer* m_loginButtonSizer;	m_loginButtonSizer = new wxBoxSizer( wxHORIZONTAL );			m_loginButtonSizer->Add( 0, 0, 1, wxEXPAND, 5 );		m_loginButton = new wxButton( m_accountSetPanel, wxID_ANY, wxT("Login"), wxDefaultPosition, wxDefaultSize, 0 );	m_loginButtonSizer->Add( m_loginButton, 0, wxALIGN_LEFT|wxALIGN_RIGHT|wxALL, 5 );			m_accountSetViaEmailSizer->Add( m_loginButtonSizer, 1, wxEXPAND, 5 );			m_accountSetSizer->Add( m_accountSetViaEmailSizer, 1, wxEXPAND, 5 );		m_FBconnectButton = new wxBitmapButton( m_accountSetPanel, wxID_ANY, FBloginbutton_png_to_wx_bitmap(), wxDefaultPosition, wxDefaultSize, wxBU_AUTODRAW );	m_accountSetSizer->Add( m_FBconnectButton, 0, wxALL, 5 );			m_accountSetPanel->SetSizer( m_accountSetSizer );	m_accountSetPanel->Layout();	m_accountSetSizer->Fit( m_accountSetPanel );	m_mainSizer->Add( m_accountSetPanel, 1, wxEXPAND | wxALL, 5 );			this->SetSizer( m_mainSizer );	this->Layout();	m_mainSizer->Fit( this );		this->Centre( wxBOTH );		// Connect Events	m_unlinkButton->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( PreferencesDialogBase::unlinkButtonOnButtonClick ), NULL, this );	m_unlinkButton->Connect( wxEVT_UPDATE_UI, wxUpdateUIEventHandler( PreferencesDialogBase::unlinkButtonOnUpdateUI ), NULL, this );	m_loginButton->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( PreferencesDialogBase::loginButtonOnButtonClick ), NULL, this );	m_loginButton->Connect( wxEVT_UPDATE_UI, wxUpdateUIEventHandler( PreferencesDialogBase::loginButtonOnUpdateUI ), NULL, this );	m_FBconnectButton->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( PreferencesDialogBase::FBconnectButtonOnButtonClick ), NULL, this );	m_FBconnectButton->Connect( wxEVT_UPDATE_UI, wxUpdateUIEventHandler( PreferencesDialogBase::FBconnectButtonOnUpdateUI ), NULL, this );}PreferencesDialogBase::~PreferencesDialogBase(){	// Disconnect Events	m_unlinkButton->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( PreferencesDialogBase::unlinkButtonOnButtonClick ), NULL, this );	m_unlinkButton->Disconnect( wxEVT_UPDATE_UI, wxUpdateUIEventHandler( PreferencesDialogBase::unlinkButtonOnUpdateUI ), NULL, this );	m_loginButton->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( PreferencesDialogBase::loginButtonOnButtonClick ), NULL, this );	m_loginButton->Disconnect( wxEVT_UPDATE_UI, wxUpdateUIEventHandler( PreferencesDialogBase::loginButtonOnUpdateUI ), NULL, this );	m_FBconnectButton->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( PreferencesDialogBase::FBconnectButtonOnButtonClick ), NULL, this );	m_FBconnectButton->Disconnect( wxEVT_UPDATE_UI, wxUpdateUIEventHandler( PreferencesDialogBase::FBconnectButtonOnUpdateUI ), NULL, this );	}AboutDialogBase::AboutDialogBase( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxDialog( parent, id, title, pos, size, style ){	this->SetSizeHints( wxSize( 400,-1 ), wxDefaultSize );		wxBoxSizer* m_mainSizer;	m_mainSizer = new wxBoxSizer( wxVERTICAL );		m_aboutStatic = new wxStaticText( this, wxID_ANY, wxT("DiveAgent"), wxDefaultPosition, wxDefaultSize, 0 );	m_aboutStatic->Wrap( -1 );	m_mainSizer->Add( m_aboutStatic, 3, wxALIGN_LEFT|wxALL, 5 );		m_okButton = new wxButton( this, wxID_ANY, wxT("Ok"), wxDefaultPosition, wxDefaultSize, 0 );	m_mainSizer->Add( m_okButton, 1, wxALIGN_RIGHT|wxALL, 5 );			this->SetSizer( m_mainSizer );	this->Layout();	m_mainSizer->Fit( this );		this->Centre( wxBOTH );}AboutDialogBase::~AboutDialogBase(){}